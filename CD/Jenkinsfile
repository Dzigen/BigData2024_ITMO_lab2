pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('dockerhub_creds')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
        GITHUB_SSH_CREDS=credentials('github_bigdata2024_itmo')
        MODELAPI_ENV = credentials('modelapi_env')
        DCOMPOSE_ENV = credentials('docker_compose_env')
    }

    stages {
        stage('Cloning github-repository'){
            steps{
                echo "====[STAGE1]===="
                cleanWs()
                sh "ssh-agent bash -c 'ssh-add $GITHUB_SSH_CREDS; git clone -b main git@github.com:Dzigen/BigData2024_ITMO_lab2.git'"
                sh 'cat ${MODELAPI_ENV} >> BigData2024_ITMO_lab2/modelapi/.env'
                sh 'cat ${DCOMPOSE_ENV} >> BigData2024_ITMO_lab2/.env'
            }
        }
        
        stage('Pull prod-image and env-image for tests') {
            steps {
                echo "====[STAGE2]===="
                sh 'docker --version'
                sh 'echo  $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
                sh 'docker pull dzigen/model_api:v1'
                sh 'docker pull dzigen/base_model_api:v1'
            }
        }

        stage('Build tests-image') {
            steps {
                echo "====[STAGE3]===="
                sh 'cd BigData2024_ITMO_lab2 && docker-compose build --no-cache test_modelapi'
            }
        }

        stage('Run func-tests') {
            steps {
                echo "====[STAGE4]===="
                sh 'cd BigData2024_ITMO_lab2 && docker-compose up test_modelapi'
            }
        }

    }

    post {
        always {
            sh 'docker stop modelapi_cntname && docker rm modelapi_cntname && docker rm test_modelapi_cntname'
            sh 'docker logout'
        }
    }
}   